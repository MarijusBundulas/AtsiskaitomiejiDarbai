import { TwingBaseNodeVisitor } from "../base-node-visitor";
import { type as nameType } from "../node/expression/name";
import { TwingNodeExpressionMethodCall } from "../node/expression/method-call";
import { type as getAttrType } from "../node/expression/get-attribute";
import { type as constantType } from "../node/expression/constant";
export class TwingNodeVisitorMacroAutoImport extends TwingBaseNodeVisitor {
    doEnterNode(node, env) {
        return node;
    }
    doLeaveNode(node, env) {
        if ((node.type == getAttrType) && (node.getNode('node').is(nameType)) && (node.getNode('node').getAttribute('name') === '_self') && (node.getNode('attribute').is(constantType))) {
            let name = node.getNode('attribute').getAttribute('value');
            node = new TwingNodeExpressionMethodCall(node.getNode('node'), name, node.getNode('arguments'), node.getTemplateLine(), node.getTemplateColumn());
            node.setAttribute('safe', true);
        }
        return node;
    }
    getPriority() {
        // we must run before auto-escaping
        return -10;
    }
}
